//
// Created by iw040 on 2021-11-02.
//

#include <iostream>
#include <vector>
#include <tuple>//3개 저장할 수 있음

using namespace std;
typedef long long ll;
typedef tuple<int, int, int> ti;
const int INF = 1e6 * 5;

//벨만-포드
vector<ll> bellmanFord(int n, int m, int start, vector<ti>& edges) {
    //오버플로우 X, 언더플로우 O
    //500 * 6,000 * (-10,000) => int 범위 넘어감!
    vector<ll> dist(n + 1, INF);//INF로 초기화

    dist[start] = 0; //시작 위치 초기화

    for (int i = 1; i <= n; i++) {
        bool flag = true; //더 이상 반복문을 실행할 필요가 없는지 확인
        for (int j = 0; j < m; j++) {
            //s->d로 가는 간선의 가중치가 w
            int s = get<0>(edges[j]);//인덱스 0에 시작점
            int d = get<1>(edges[j]);//1에 도착점
            int w = get<2>(edges[j]);//시간

            if (dist[s] == INF) //아직 시작점에서 s로 가는 경로가 발견되지 않았으므로 갱신할 수 없음
                continue;//다음으로 넘어가기
            ll next_weight = w + dist[s];//시작도시까지의 걸리는 시간
            if (dist[d] > next_weight) { //더 짧은 경로로 갈 수 있다면
                if (i == n) //n번째 갱신이었다면 음의 사이클이 발생한 것
                    return { INF + 1 };//경로가 없다고 착각할 수 있으므로 1 더해서 리턴
                dist[d] = next_weight;//더 짧은 시간으로 갱신
                flag = false;//flag바꿔주기
            }
        }
        if (flag) //더 이상 갱신되지 않았다면 더 탐색할 필요 없음
            break;
    }
    return dist;//최소 시간 배열 반환
}

int main() {
    int n, m, a, b, c;//정점, 간선의 수, 간선의 정보

    //입력
    cin >> n >> m;
    vector<ti> edges(m); //간선 정보를 저장할 벡터 (그래프 관계보다는 간선 자체의 정보가 더 중요함)
    for (int i = 0; i < m; i++) {
        cin >> a >> b >> c;//간선 정보 입력
        edges[i] = { a, b, c }; //방향 그래프
    }

    //연산
    vector<ll> ans = bellmanFord(n, m, 1, edges);

    //출력
    if (ans[0] == INF + 1) { //음의 사이클
        cout << -1;//-1출력
        return 0;//종료하기
    }
    for (int i = 2; i <= n; i++)//음의 사이클 아니면
        cout << ((ans[i] == INF) ? -1 : ans[i]) << '\n';//INF면 -1출력, 아니면 최소 시간 출력
}